/**
 * Details of a specific product in cart.
 */
interface Product {
    /**
     * Internal unique product ID.
     */
    readonly id: number;
    /**
     * Product SKU.
     */
    readonly sku: string;
    /**
     * Product name.
     */
    readonly name: string;
    /**
     * Product price.
     */
    readonly price: number;
}
/**
 * CartItem represents a single item (product variety) in cart.
 */
interface CartItem {
    /**
     * The map of product properties (variation properties, if the variation is added to cart).
     */
    readonly product: Product;
    /**
     * Quantity of the given product variety in cart.
     */
    readonly quantity: number;
}
/**
 * The state of current customer's shopping cart.
 */
interface Cart {
    /**
     * Cart ID you can use later in the cart service.
     */
    readonly cartId: string;
    /**
     * Enlists all items currently present in customerâ€™s cart.
     */
    readonly items: CartItem[];
    /**
     * Total number of product varieties in cart
     */
    readonly productsQuantity: number;
}

/**
 * Ecommerce SDK cart service. Contains cart operations.
 * @class
 */
declare class CartService {
    private readonly DEFAULT_STORE_LOCATION_PATH;
    private readonly cartConverter;
    private readonly localStorageCartKey;
    private readonly defaultStoreLocationPath;
    constructor(storeId: number, storeLocationPath?: string);
    /**
     * Get cart data in current store.
     * @returns {Promise<Cart>} Promise of current {@link Cart} data.
     */
    get(): Promise<Cart>;
    /**
     * Navigate to checkout page with current cart data.
     * @param {string} storeLocationPath - Relative URL path to store page.
     * In case argument is provided, it will be used for checkout URL composition.
     * In case argument is not provided and initial {@link StoreOptions} contains storeLocationPath,
     * path from {@link StoreOptions} will be used for checkout URL composition.
     * In case argument is not provided and initial {@link StoreOptions} does not contain
     * storeLocationPath, default path '/store' will be used for checkout URL composition.
     */
    goToCheckout(storeLocationPath?: string): void;
    /**
     * Converts store location path to unified format without leading and trailing slash.
     * @private
     */
    private unifyStoreLocationPath;
    private getCartKey;
    private createCartPromise;
    private createEmptyCartPromise;
}

/**
 * Options for Ecommerce instance initialization.
 */
interface StoreOptions {
    /**
     * ID of store to operate with.
     */
    readonly storeId: number;
    /**
     * Relative URL path to store page. Optional, default value '/store'.
     */
    readonly storeLocationPath?: string;
}

/**
* Ecommerce SDK entry point.
* @class
*/
declare class Ecommerce {
    readonly cart: CartService;
    /**
     * @constructs Ecommerce
     * @param {StoreOptions} storeOptions An instance of {@link StoreOptions} used to
     * configure Ecommerce SDK.
     * @param {number} storeOptions.storeId - ID of store to operate with.
     * @param {string} storeOptions.storeLocationPath - Relative URL path to store page.
     * Optional, default value '/store'.
     */
    constructor(storeOptions: StoreOptions);
}

export { Ecommerce as default };
